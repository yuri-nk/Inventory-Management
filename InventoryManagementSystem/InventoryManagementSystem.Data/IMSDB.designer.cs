#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagementSystem.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="imsDB")]
	public partial class IMSDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertMemberType(MemberType instance);
    partial void UpdateMemberType(MemberType instance);
    partial void DeleteMemberType(MemberType instance);
    partial void InsertMembership(Membership instance);
    partial void UpdateMembership(Membership instance);
    partial void DeleteMembership(Membership instance);
    partial void InsertOffer(Offer instance);
    partial void UpdateOffer(Offer instance);
    partial void DeleteOffer(Offer instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    #endregion
		
		public IMSDBDataContext() : 
				base(global::InventoryManagementSystem.Data.Properties.Settings.Default.imsDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IMSDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IMSDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IMSDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IMSDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<MemberType> MemberTypes
		{
			get
			{
				return this.GetTable<MemberType>();
			}
		}
		
		public System.Data.Linq.Table<Membership> Memberships
		{
			get
			{
				return this.GetTable<Membership>();
			}
		}
		
		public System.Data.Linq.Table<Offer> Offers
		{
			get
			{
				return this.GetTable<Offer>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountId;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _UserTypeID;
		
		private double _Salary;
		
		private System.Nullable<System.DateTime> _JoinDate;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserTypeIDChanging(string value);
    partial void OnUserTypeIDChanged();
    partial void OnSalaryChanging(double value);
    partial void OnSalaryChanged();
    partial void OnJoinDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJoinDateChanged();
    #endregion
		
		public Account()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(256)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Float NOT NULL")]
		public double Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="Date")]
		public System.Nullable<System.DateTime> JoinDate
		{
			get
			{
				return this._JoinDate;
			}
			set
			{
				if ((this._JoinDate != value))
				{
					this.OnJoinDateChanging(value);
					this.SendPropertyChanging();
					this._JoinDate = value;
					this.SendPropertyChanged("JoinDate");
					this.OnJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Log", Storage="_Logs", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Transaction", Storage="_Transactions", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Account", Storage="_UserType", ThisKey="UserTypeID", OtherKey="UserTypeId", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._UserTypeID = value.UserTypeId;
					}
					else
					{
						this._UserTypeID = default(string);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Offer> _Offers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Items", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Offer", Storage="_Offers", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ItemCode;
		
		private string _ItemName;
		
		private string _Description;
		
		private string _CategoryID;
		
		private double _Price;
		
		private int _Stock;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Offer> _Offers;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    #endregion
		
		public Item()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Log", Storage="_Logs", ThisKey="ItemCode", OtherKey="ItemCode")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Offer", Storage="_Offers", ThisKey="ItemCode", OtherKey="ItemCode")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Transaction", Storage="_Transactions", ThisKey="ItemCode", OtherKey="ItemCode")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private System.DateTime _TimeIn;
		
		private System.DateTime _TimeOut;
		
		private string _Action;
		
		private string _AccountId;
		
		private string _ItemCode;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnTimeInChanging(System.DateTime value);
    partial void OnTimeInChanged();
    partial void OnTimeOutChanging(System.DateTime value);
    partial void OnTimeOutChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    #endregion
		
		public Log()
		{
			this._Account = default(EntityRef<Account>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeIn", DbType="DateTime NOT NULL")]
		public System.DateTime TimeIn
		{
			get
			{
				return this._TimeIn;
			}
			set
			{
				if ((this._TimeIn != value))
				{
					this.OnTimeInChanging(value);
					this.SendPropertyChanging();
					this._TimeIn = value;
					this.SendPropertyChanged("TimeIn");
					this.OnTimeInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOut", DbType="DateTime NOT NULL")]
		public System.DateTime TimeOut
		{
			get
			{
				return this._TimeOut;
			}
			set
			{
				if ((this._TimeOut != value))
				{
					this.OnTimeOutChanging(value);
					this.SendPropertyChanging();
					this._TimeOut = value;
					this.SendPropertyChanged("TimeOut");
					this.OnTimeOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="VarChar(256)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="VarChar(15)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Log", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Log", Storage="_Item", ThisKey="ItemCode", OtherKey="ItemCode", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._ItemCode = value.ItemCode;
					}
					else
					{
						this._ItemCode = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberType")]
	public partial class MemberType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MemberTypeID;
		
		private string _MemberTypeName;
		
		private EntitySet<Membership> _Memberships;
		
		private EntitySet<Offer> _Offers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberTypeIDChanging(string value);
    partial void OnMemberTypeIDChanged();
    partial void OnMemberTypeNameChanging(string value);
    partial void OnMemberTypeNameChanged();
    #endregion
		
		public MemberType()
		{
			this._Memberships = new EntitySet<Membership>(new Action<Membership>(this.attach_Memberships), new Action<Membership>(this.detach_Memberships));
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MemberTypeName
		{
			get
			{
				return this._MemberTypeName;
			}
			set
			{
				if ((this._MemberTypeName != value))
				{
					this.OnMemberTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeName = value;
					this.SendPropertyChanged("MemberTypeName");
					this.OnMemberTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberType_Membership", Storage="_Memberships", ThisKey="MemberTypeID", OtherKey="MemberTypeID")]
		public EntitySet<Membership> Memberships
		{
			get
			{
				return this._Memberships;
			}
			set
			{
				this._Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberType_Offer", Storage="_Offers", ThisKey="MemberTypeID", OtherKey="MemberTypeID")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.MemberType = this;
		}
		
		private void detach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.MemberType = null;
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.MemberType = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.MemberType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Membership")]
	public partial class Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MembershipID;
		
		private string _MemberTypeID;
		
		private string _MemberName;
		
		private string _MemberAddress;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private System.DateTime _MemberFrom;
		
		private double _TotalShopping;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<MemberType> _MemberType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembershipIDChanging(string value);
    partial void OnMembershipIDChanged();
    partial void OnMemberTypeIDChanging(string value);
    partial void OnMemberTypeIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnMemberAddressChanging(string value);
    partial void OnMemberAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMemberFromChanging(System.DateTime value);
    partial void OnMemberFromChanged();
    partial void OnTotalShoppingChanging(double value);
    partial void OnTotalShoppingChanged();
    #endregion
		
		public Membership()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._MemberType = default(EntityRef<MemberType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipID", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MembershipID
		{
			get
			{
				return this._MembershipID;
			}
			set
			{
				if ((this._MembershipID != value))
				{
					this.OnMembershipIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipID = value;
					this.SendPropertyChanged("MembershipID");
					this.OnMembershipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					if (this._MemberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberAddress", DbType="VarChar(256)")]
		public string MemberAddress
		{
			get
			{
				return this._MemberAddress;
			}
			set
			{
				if ((this._MemberAddress != value))
				{
					this.OnMemberAddressChanging(value);
					this.SendPropertyChanging();
					this._MemberAddress = value;
					this.SendPropertyChanged("MemberAddress");
					this.OnMemberAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberFrom", DbType="Date NOT NULL")]
		public System.DateTime MemberFrom
		{
			get
			{
				return this._MemberFrom;
			}
			set
			{
				if ((this._MemberFrom != value))
				{
					this.OnMemberFromChanging(value);
					this.SendPropertyChanging();
					this._MemberFrom = value;
					this.SendPropertyChanged("MemberFrom");
					this.OnMemberFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalShopping", DbType="Float NOT NULL")]
		public double TotalShopping
		{
			get
			{
				return this._TotalShopping;
			}
			set
			{
				if ((this._TotalShopping != value))
				{
					this.OnTotalShoppingChanging(value);
					this.SendPropertyChanging();
					this._TotalShopping = value;
					this.SendPropertyChanged("TotalShopping");
					this.OnTotalShoppingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membership_Transaction", Storage="_Transactions", ThisKey="MembershipID", OtherKey="MembershipID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberType_Membership", Storage="_MemberType", ThisKey="MemberTypeID", OtherKey="MemberTypeID", IsForeignKey=true)]
		public MemberType MemberType
		{
			get
			{
				return this._MemberType.Entity;
			}
			set
			{
				MemberType previousValue = this._MemberType.Entity;
				if (((previousValue != value) 
							|| (this._MemberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberType.Entity = null;
						previousValue.Memberships.Remove(this);
					}
					this._MemberType.Entity = value;
					if ((value != null))
					{
						value.Memberships.Add(this);
						this._MemberTypeID = value.MemberTypeID;
					}
					else
					{
						this._MemberTypeID = default(string);
					}
					this.SendPropertyChanged("MemberType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Membership = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Membership = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offer")]
	public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OfferID;
		
		private string _OfferName;
		
		private string _Description;
		
		private double _DiscountPercentage;
		
		private System.DateTime _OfferGiven;
		
		private System.DateTime _OfferValid;
		
		private string _ItemCode;
		
		private string _CategoryID;
		
		private string _MemberTypeID;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<MemberType> _MemberType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferIDChanging(string value);
    partial void OnOfferIDChanged();
    partial void OnOfferNameChanging(string value);
    partial void OnOfferNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDiscountPercentageChanging(double value);
    partial void OnDiscountPercentageChanged();
    partial void OnOfferGivenChanging(System.DateTime value);
    partial void OnOfferGivenChanged();
    partial void OnOfferValidChanging(System.DateTime value);
    partial void OnOfferValidChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnMemberTypeIDChanging(string value);
    partial void OnMemberTypeIDChanged();
    #endregion
		
		public Offer()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Category = default(EntityRef<Category>);
			this._Item = default(EntityRef<Item>);
			this._MemberType = default(EntityRef<MemberType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferID", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OfferID
		{
			get
			{
				return this._OfferID;
			}
			set
			{
				if ((this._OfferID != value))
				{
					this.OnOfferIDChanging(value);
					this.SendPropertyChanging();
					this._OfferID = value;
					this.SendPropertyChanged("OfferID");
					this.OnOfferIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OfferName
		{
			get
			{
				return this._OfferName;
			}
			set
			{
				if ((this._OfferName != value))
				{
					this.OnOfferNameChanging(value);
					this.SendPropertyChanging();
					this._OfferName = value;
					this.SendPropertyChanged("OfferName");
					this.OnOfferNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPercentage", DbType="Float NOT NULL")]
		public double DiscountPercentage
		{
			get
			{
				return this._DiscountPercentage;
			}
			set
			{
				if ((this._DiscountPercentage != value))
				{
					this.OnDiscountPercentageChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercentage = value;
					this.SendPropertyChanged("DiscountPercentage");
					this.OnDiscountPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferGiven", DbType="Date NOT NULL")]
		public System.DateTime OfferGiven
		{
			get
			{
				return this._OfferGiven;
			}
			set
			{
				if ((this._OfferGiven != value))
				{
					this.OnOfferGivenChanging(value);
					this.SendPropertyChanging();
					this._OfferGiven = value;
					this.SendPropertyChanged("OfferGiven");
					this.OnOfferGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferValid", DbType="Date NOT NULL")]
		public System.DateTime OfferValid
		{
			get
			{
				return this._OfferValid;
			}
			set
			{
				if ((this._OfferValid != value))
				{
					this.OnOfferValidChanging(value);
					this.SendPropertyChanging();
					this._OfferValid = value;
					this.SendPropertyChanged("OfferValid");
					this.OnOfferValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="VarChar(15)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="VarChar(5)")]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", DbType="VarChar(10)")]
		public string MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					if (this._MemberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Transaction", Storage="_Transactions", ThisKey="OfferID", OtherKey="OfferID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Offer", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Offer", Storage="_Item", ThisKey="ItemCode", OtherKey="ItemCode", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._ItemCode = value.ItemCode;
					}
					else
					{
						this._ItemCode = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberType_Offer", Storage="_MemberType", ThisKey="MemberTypeID", OtherKey="MemberTypeID", IsForeignKey=true)]
		public MemberType MemberType
		{
			get
			{
				return this._MemberType.Entity;
			}
			set
			{
				MemberType previousValue = this._MemberType.Entity;
				if (((previousValue != value) 
							|| (this._MemberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberType.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._MemberType.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._MemberTypeID = value.MemberTypeID;
					}
					else
					{
						this._MemberTypeID = default(string);
					}
					this.SendPropertyChanged("MemberType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Offer = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Offer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TransactionID;
		
		private System.DateTime _TransactionDateTime;
		
		private string _ItemCode;
		
		private string _AccountId;
		
		private string _MembershipID;
		
		private string _OfferID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Membership> _Membership;
		
		private EntityRef<Offer> _Offer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(string value);
    partial void OnTransactionIDChanged();
    partial void OnTransactionDateTimeChanging(System.DateTime value);
    partial void OnTransactionDateTimeChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnMembershipIDChanging(string value);
    partial void OnMembershipIDChanged();
    partial void OnOfferIDChanging(string value);
    partial void OnOfferIDChanged();
    #endregion
		
		public Transaction()
		{
			this._Account = default(EntityRef<Account>);
			this._Item = default(EntityRef<Item>);
			this._Membership = default(EntityRef<Membership>);
			this._Offer = default(EntityRef<Offer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TransactionDateTime
		{
			get
			{
				return this._TransactionDateTime;
			}
			set
			{
				if ((this._TransactionDateTime != value))
				{
					this.OnTransactionDateTimeChanging(value);
					this.SendPropertyChanging();
					this._TransactionDateTime = value;
					this.SendPropertyChanged("TransactionDateTime");
					this.OnTransactionDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipID", DbType="VarChar(32)")]
		public string MembershipID
		{
			get
			{
				return this._MembershipID;
			}
			set
			{
				if ((this._MembershipID != value))
				{
					if (this._Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembershipIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipID = value;
					this.SendPropertyChanged("MembershipID");
					this.OnMembershipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferID", DbType="VarChar(32)")]
		public string OfferID
		{
			get
			{
				return this._OfferID;
			}
			set
			{
				if ((this._OfferID != value))
				{
					if (this._Offer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfferIDChanging(value);
					this.SendPropertyChanging();
					this._OfferID = value;
					this.SendPropertyChanged("OfferID");
					this.OnOfferIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Transaction", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Transaction", Storage="_Item", ThisKey="ItemCode", OtherKey="ItemCode", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._ItemCode = value.ItemCode;
					}
					else
					{
						this._ItemCode = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membership_Transaction", Storage="_Membership", ThisKey="MembershipID", OtherKey="MembershipID", IsForeignKey=true)]
		public Membership Membership
		{
			get
			{
				return this._Membership.Entity;
			}
			set
			{
				Membership previousValue = this._Membership.Entity;
				if (((previousValue != value) 
							|| (this._Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membership.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Membership.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._MembershipID = value.MembershipID;
					}
					else
					{
						this._MembershipID = default(string);
					}
					this.SendPropertyChanged("Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Transaction", Storage="_Offer", ThisKey="OfferID", OtherKey="OfferID", IsForeignKey=true)]
		public Offer Offer
		{
			get
			{
				return this._Offer.Entity;
			}
			set
			{
				Offer previousValue = this._Offer.Entity;
				if (((previousValue != value) 
							|| (this._Offer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offer.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Offer.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._OfferID = value.OfferID;
					}
					else
					{
						this._OfferID = default(string);
					}
					this.SendPropertyChanged("Offer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserTypeId;
		
		private string _UserTypeName;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIdChanging(string value);
    partial void OnUserTypeIdChanged();
    partial void OnUserTypeNameChanging(string value);
    partial void OnUserTypeNameChanged();
    #endregion
		
		public UserType()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeName", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string UserTypeName
		{
			get
			{
				return this._UserTypeName;
			}
			set
			{
				if ((this._UserTypeName != value))
				{
					this.OnUserTypeNameChanging(value);
					this.SendPropertyChanging();
					this._UserTypeName = value;
					this.SendPropertyChanged("UserTypeName");
					this.OnUserTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Account", Storage="_Accounts", ThisKey="UserTypeId", OtherKey="UserTypeID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
                this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
}
#pragma warning restore 1591
